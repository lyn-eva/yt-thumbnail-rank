const param = {
  req: {
    _readableState: {
      objectMode: false,
      highWaterMark: 16384,
      buffer: { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: null,
      ended: true,
      endEmitted: false,
      reading: false,
      constructed: true,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null,
    },
    // _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    socket: {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      // _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      // on: [Function: socketListenerWrap],
      // addListener: [Function: socketListenerWrap],
      // prependListener: [Function: socketListenerWrap],
      // setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [ServerResponse],
      timeout: 0,
      [Symbol(async_id_symbol)]: 8150,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 9310,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 8159,
        [Symbol(triggerId)]: 8156,
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
      'Host',
      'localhost:3000',
      'Connection',
      'keep-alive',
      'Cache-Control',
      'max-age=0',
      'sec-ch-ua',
      '".Not/A)Brand";v="99", "Google Chrome";v="103", "Chromium";v="103"',
      'sec-ch-ua-mobile',
      '?0',
      'sec-ch-ua-platform',
      '"Linux"',
      'Upgrade-Insecure-Requests',
      '1',
      'User-Agent',
      'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36',
      'Accept',
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
      'Sec-Fetch-Site',
      'same-origin',
      'Sec-Fetch-Mode',
      'navigate',
      'Sec-Fetch-User',
      '?1',
      'Sec-Fetch-Dest',
      'document',
      'Referer',
      'http://localhost:3000/profile/343',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'en,en-US;q=0.9,ja;q=0.8,my;q=0.7',
      'Cookie',
      'ai_user=65/7Uw6oXqYcK5KAdv8Ehz|2022-06-01T04:42:59.464Z; mp_b393b6096f304e3a0bb3e5ac6eca818f_mixpanel=%7B%22distinct_id%22%3A%20%221811d92f610d14-0678dddee4583d-3e6e1d58-13c680-1811d92f611e05%22%2C%22%24device_id%22%3A%20%221811d92f610d14-0678dddee4583d-3e6e1d58-13c680-1811d92f611e05%22%2C%22%24initial_referrer%22%3A%20%22%24direct%22%2C%22%24initial_referring_domain%22%3A%20%22%24direct%22%7D; ai_session=GsvkVVG79PF5ftPNsde4Mx|1657797942588|1657800788518',
    ],
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/profile/343',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      // _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      // on: [Function: socketListenerWrap],
      // addListener: [Function: socketListenerWrap],
      // prependListener: [Function: socketListenerWrap],
      // setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [ServerResponse],
      timeout: 0,
      [Symbol(async_id_symbol)]: 8150,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 9310,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 8159,
        [Symbol(triggerId)]: 8156,
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
    },
    _consuming: false,
    _dumped: false,
    cookies: {
      ai_user: '65/7Uw6oXqYcK5KAdv8Ehz|2022-06-01T04:42:59.464Z',
      mp_b393b6096f304e3a0bb3e5ac6eca818f_mixpanel:
        '{"distinct_id": "1811d92f610d14-0678dddee4583d-3e6e1d58-13c680-1811d92f611e05","$device_id": "1811d92f610d14-0678dddee4583d-3e6e1d58-13c680-1811d92f611e05","$initial_referrer": "$direct","$initial_referring_domain": "$direct"}',
      ai_session: 'GsvkVVG79PF5ftPNsde4Mx|1657797942588|1657800788518',
    },
    [Symbol(kCapture)]: false,
    [Symbol(kHeaders)]: {
      host: 'localhost:3000',
      connection: 'keep-alive',
      'cache-control': 'max-age=0',
      'sec-ch-ua': '".Not/A)Brand";v="99", "Google Chrome";v="103", "Chromium";v="103"',
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"Linux"',
      'upgrade-insecure-requests': '1',
      'user-agent':
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36',
      accept:
        'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
      'sec-fetch-site': 'same-origin',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-user': '?1',
      'sec-fetch-dest': 'document',
      referer: 'http://localhost:3000/profile/343',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'en,en-US;q=0.9,ja;q=0.8,my;q=0.7',
      cookie:
        'ai_user=65/7Uw6oXqYcK5KAdv8Ehz|2022-06-01T04:42:59.464Z; mp_b393b6096f304e3a0bb3e5ac6eca818f_mixpanel=%7B%22distinct_id%22%3A%20%221811d92f610d14-0678dddee4583d-3e6e1d58-13c680-1811d92f611e05%22%2C%22%24device_id%22%3A%20%221811d92f610d14-0678dddee4583d-3e6e1d58-13c680-1811d92f611e05%22%2C%22%24initial_referrer%22%3A%20%22%24direct%22%2C%22%24initial_referring_domain%22%3A%20%22%24direct%22%7D; ai_session=GsvkVVG79PF5ftPNsde4Mx|1657797942588|1657800788518',
    },
    [Symbol(kHeadersCount)]: 34,
    [Symbol(kTrailers)]: null,
    [Symbol(kTrailersCount)]: 0,
    [Symbol(NextRequestMeta)]: {
      __NEXT_INIT_URL: 'http://localhost:3000/profile/343',
      __NEXT_INIT_QUERY: {},
      _protocol: 'http',
      __nextHadTrailingSlash: false,
      __nextIsLocaleDomain: false,
    },
  },
  res: {
    // _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    socket: {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      // _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      // on: [Function: socketListenerWrap],
      // addListener: [Function: socketListenerWrap],
      // prependListener: [Function: socketListenerWrap],
      // setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [Circular * 1],
      timeout: 0,
      [Symbol(async_id_symbol)]: 8150,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 9310,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 8159,
        [Symbol(triggerId)]: 8156,
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
    },
    _header: null,
    _keepAliveTimeout: 5000,
    // _onPendingData: [Function: bound updateOutgoingData],
    req: {
      _readableState: [ReadableState],
      // _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      socket: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/profile/343',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Socket],
      _consuming: false,
      _dumped: false,
      cookies: [Object],
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 34,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [Symbol(NextRequestMeta)]: [Object],
    },
    _sent100: false,
    _expect_continue: false,
    statusCode: 200,
    // flush: [Function: flush],
    // write: [Function: write],
    // end: [Function: end],
    // on: [Function: on],
    // writeHead: [Function: writeHead],
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: null,
  },
  query: { uid: '343' },
  resolvedUrl: '/profile/343',
  params: { uid: '343' },
  locales: undefined,
  locale: undefined,
  defaultLocale: undefined,
};
// I'm building a Nextjs app with SSR. I use `getServerSideProps` to fetch data from firestore(it runs on server). Example profile route: `../profile/[uid]` . I made documents for each user with their uid(unique id got after creating a new account with firebase auth) and store them in a collection.  `gettServerSideProps` receives `req` , `res` objects and a query(`{uid: #DF349FH8}`).  Client side has  How can I identify that the requested user own that `uid`?

console.log(param.req.cookies)